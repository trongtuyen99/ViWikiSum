keyword: Không gian tên
url: https://qastack.vn/programming/3384204/what-are-namespaces
content:
Không gian tên làm cho các hàm và các lớp phạm vi nào cho các biến. Nó cho phép bạn sử dụng cùng một chức năng hoặc tên lớp trong các phần khác nhau của cùng một chương trình mà không gây ra xung đột tên. Nói một cách đơn giản, hãy nghĩ về một không gian tên như họ của một người . Nếu có hai người tên là "John", bạn có thể sử dụng họ của họ để phân biệt họ. Giả sử bạn viết một ứng dụng sử dụng hàm có tên output(). output()Hàm của bạn lấy tất cả mã HTML trên trang của bạn và gửi nó cho người dùng. Sau đó, ứng dụng của bạn trở nên lớn hơn và bạn muốn thêm các tính năng mới. Bạn thêm một thư viện cho phép bạn tạo nguồn cấp RSS. Thư viện này cũng sử dụng một hàm có tên output()để xuất nguồn cấp dữ liệu cuối cùng. Làm thế nào để chúng ta giải quyết có hai output()chức năng? Chúng tôi gắn từng output()chức năng trong không gian tên riêng của nó . Nếu chúng ta không có không gian tên, chúng ta sẽ (có khả năng) thay đổi rất nhiều mã bất cứ khi nào chúng ta thêm thư viện hoặc đưa ra các tiền tố tẻ nhạt để làm cho tên hàm của chúng ta trở nên độc đáo. Với các không gian tên, chúng ta có thể tránh đau đầu khi đặt tên xung đột khi trộn mã của bên thứ ba với các dự án của riêng chúng ta. Một không gian tên cho phép bạn đặt một loạt mã dưới một tên và không có bất kỳ xung đột đặt tên nào với các lớp, hàm và hằng. PHP sử dụng ký tự hơi gây tranh cãi để hiển thị các mức không gian tên. Mọi người đứng dậy trong vòng tay vì nó cũng được sử dụng như một nhân vật trốn thoát. Để sử dụng không gian tên trong PHP, hãy sử dụng một cái gì đó như thế này ở đầu tệp của bạn. Bạn có thể tìm thấy nhiều thông tin hơn về tài liệu PHP chính thức cho các không gian tên . Vì dễ dàng hơn để tìm hiểu về từ khóa, sử dụng mối quan hệ của người dùng bằng cách biết về không gian tên của người dùng, hãy để tôi giải thích không gian tên trước bằng cách xem xét một dự án cơ bản của Laravel. app / http / Trình điều khiển từ thư mục gốc của dự án Ngoài ra còn có một lớp trình điều khiển khác có tên: Controller.php , nhưng lớp này nằm trong đường dẫn:. Bạn không cần phải xem mã nguồn nếu bạn chưa quen với php vì nó có thể làm bạn bối rối, thay vào đó hãy để tôi giải thích cho bạn phần mà chúng tôi quan tâm và sẽ giúp chúng tôi hiểu về cách sử dụng không gian tên Mùi. trừ khi có một cách để phân biệt hai lớp này và đó là nơi namespacecó ích và usetừ khóa giúp hoàn thành nhiệm vụ, cho phép sử dụng; (các lớp; phương thức; giao diện và hằng số), có cùng tên, trong cùng một phạm vi. Bây giờ làm thế nào nó được thực hiện trong mã? nếu chúng ta nhìn vàomã nguồn app / http / Controlsers / Controller.php , chúng ta có thể thấy ở đầu không gian tên lớp được khai báo là:namespace AppHttpControllersvì vậy đây là cách bạn cung cấp cho lớp của bạn một không gian tên để bây giờ nó có thể được tham chiếu bởi các lớp khác ngoại hình này giống như đường dẫn đến lớp học này từ thư mục gốc của dự án, với sự khác biệt nhỏ và đó là việc sử dụng “” thay vì “/“. (giống như dấu nhắc lệnh trong cửa sổ) , nhưng có sự khác biệt nhau và đó là App có vốn đầu A trong không gian tên so với ứng dụng với chữ thường a trong đường dẫn. Cũng lưu ý rằng không gian tên là trường hợp nhạy cảm. Có các kỹ thuật như không gian tên trong các ngôn ngữ lập trình khác (như các gói trong Java). Chúng được sử dụng để có thể có các lớp đột biến có cùng tên với một dự án. Giống như các thư mục và tệp , không gian tên trong PHP phục vụ cho các lớp nhóm , hàm , giao diện và hằng . Nó cung cấp một cách gói các mục từ không gian toàn cầu và cho phép sử dụng tên mục đơn giản mà không gây ra xung đột tên trong một chương trình. Một không gian tên hoạt động như một thư mục. Bạn biết làm thế nào bạn có thể đặt các tập tin trong một thư mục có cùng tên với các tập tin trong thư mục mẹ (hoặc bất kỳ khác)? Chà, một không gian tên cho phép bạn làm điều đó trong một ứng dụng cho các biến, hàm và lớp. Có một chút xu hướng trong PHP cách đây ít lâu đối với các lớp hàm tĩnh khổng lồ. Cách duy nhất để gọi bất kỳ chức năng nào trong số đó là tiền tố một cuộc gọi với tên lớp. Đây là một nỗ lực nguyên thủy tại các không gian tên, nhưng không có nhiều lợi ích. Một không gian tên về cơ bản cho phép bạn đặt mã vào một thùng chứa. Điều này sẽ ngăn các vấn đề với hai hàm (cũng như các lớp và biến) có cùng tên. Chúng rất hữu ích khi làm việc khi các ứng dụng lớn hơn để ngăn chặn sự cố với các đoạn mã chia sẻ cùng tên. Ví dụ: giả sử chúng tôi muốn hai chức năng gọi là "TheMessage". Cả hai sẽ in (echo) tin nhắn khác nhau mỗi. Thông thường, điều này sẽ gây ra lỗi cú pháp, vì bạn không thể có hai hàm có cùng tên. Để khắc phục điều này, bạn có thể đặt các hàm này vào các không gian tên riêng biệt. Điều này sẽ cho phép bạn sử dụng cả hai chức năng mà không có bất kỳ lỗi nào. Namespace giống như đóng gói nhiều thứ vào một gói duy nhất. Hãy tưởng tượng một không gian tên như một ngăn kéo trong đó bạn có thể đặt tất cả các loại: bút chì, thước kẻ, một mảnh giấy và vv. Để tránh sử dụng các vật phẩm của nhau, bạn quyết định dán nhãn các ngăn kéo để rõ ràng những gì thuộc về ai. Không gian tên được sử dụng để bao quanh nhóm mã để chúng có thể được sử dụng ở những nơi khác nhau mà không có xung đột tên. Hãy nghĩ về điều này vì jQuery không có phương thức xung đột và bạn sẽ hiểu nó tốt hơn. Một không gian tên là một hệ thống đơn giản để kiểm soát các tên trong một chương trình. Nó đảm bảo rằng tên là duy nhất và sẽ không dẫn đến bất kỳ xung đột. Bạn có thể sử dụng không gian tên để tránh xung đột tên giữa mã bạn tạo và các lớp / hàm / hằng PHP bên trong hoặc các lớp / hàm / hằng của bên thứ ba. Không gian tên cũng có khả năng bí danh (hoặc rút ngắn) ExtraLongNames được thiết kế để giảm vấn đề đầu tiên, cải thiện khả năng đọc mã nguồn. Như chúng ta đã biết, không gian tên và đặc điểm không phải là mới trong PHP, nhưng vẫn có nhiều nhà phát triển php không sử dụng các khái niệm tuyệt vời này vì tính phức tạp của chúng. Vì vậy, trong bài viết này. Tôi sẽ cố gắng xóa chúng bằng các ví dụ. Không gian tên và đặc điểm là gì?. Bạn có thể sử dụng không gian tên để tránh xung đột tên giữa mã bạn tạo và các lớp / hàm / hằng PHP bên trong hoặc các lớp / hàm / hằng của bên thứ ba. Không gian tên cũng có khả năng bí danh (hoặc rút ngắn) ExtraLongNames được thiết kế để giảm vấn đề đầu tiên, cải thiện khả năng đọc mã nguồn. Hãy hiểu không gian tên với một ví dụ. tạo một thư mục tên là php phpoops, trong htdocs (xampp) hoặc www (xwamp) tạo một thư mục mới trong thư mục gốc có tên là tên không gian tên, và sau đó tạo một tệp index.php trong thư mục không gian tên.
