keyword: Void (kiểu dữ liệu)
url: https://www.howkteam.vn/course/khoa-hoc-lap-trinh-c-can-ban/con-tro-void-void-pointers-3812
content:
Hôm nay, chúng ta sẽ tiếp tục tìm hiểu về những kiến thức liên quan đến con trỏ trong C++, cụ thể là Con trỏ void (Void pointers). Kiểu dữ liệu trỏ đến (int, double, .) quy định cách truy xuất dữ liệu của vùng nhớ. Địa chỉ của vùng nhớ mà nó trỏ tới quy định cụ thể nơi bạn có thể truy xuất dữ liệu. Kiểu dữ liệu đang được trỏ đến là kiểu của con trỏ (int *, double *, .), trong khi địa chỉ của dữ liệu là giá trị thực tế chứa trong biến con trỏ. Vì vậy, một con trỏ void (void *) là một con trỏ không chỉ định thông tin kiểu dữ liệu. Nó cho bạn biết dữ liệu được lưu ở đâu, nhưng nó không cho bạn biết cách truy xuất dữ liệu đó. Trong đoạn code trên, voidPtr và intPtr đều trỏ vào địa chỉ của biến value, nhưng chúng ta chỉ có thể sử dụng toán tử dereference (*) lên con trỏ intPtr chứ không thể sử dụng cho con trỏ voidPtr, vì trình biên dịch không thể biết con trỏ voidPtr trỏ đến kiểu dữ liệu gì. Nếu một con trỏ void không xác định được kiểu dữ liệu của vùng nhớ mà nó trỏ tới, làm thế nào để chúng ta biết kiểu dữ liệu mà nó trỏ tới là gì (int, double, …). Thông thường, để sử dụng được con trỏ void, bạn phải lấy thông tin về kiểu con trỏ theo cách khác (sử dụng thêm tham số hoặc biến cho biết kiểu con trỏ), sau đó ép kiểu con trỏ đó đến một kiểu cụ thể (int, double, …) và sau đó sử dụng nó như bình thường. Thông thường, bạn nên tránh sử dụng con trỏ void trừ khi thật cần thiết. Vì chúng cho phép bạn tránh kiểm tra kiểu, điều này cho phép bạn vô tình làm những việc không có ý nghĩa, và trình biên dịch sẽ không thông báo lỗi. Mặc dù hàm printValueOfPointer() là một cách ngắn gọn để xây dựng một hàm duy nhất xử lý nhiều kiểu dữ liệu. Tuy nhiên, C++ đã cung cấp một cách tốt hơn để làm điều tương tự thông qua nạp chồng hàm (function overloading), hoặc khuôn mẫu hàm (dunction template). Những khái niệm này sẽ được giới thiệu trong những bài học sau. Qua bài học này, bạn đã nắm được Con trỏ void (Void pointers) trong C++. Lưu ý rằng bạn nên hạn chế lạm dụng nó, trừ khi không còn cách giải quyết nào khác. Trong bài tiếp theo, mình sẽ giới thiệu cho các bạn khái niệm CON TRỎ TRỎ ĐẾN CON TRỎ (Pointers to pointers) trong C++. Nhằm phục vụ mục đích học tập Offline của cộng đồng, Kteam hỗ trợ tính năng lưu trữ nội dung bài học Con trỏ void (Void pointers) dưới dạng file PDF trong link bên dưới. Ngoài ra, bạn cũng có thể tìm thấy các tài liệu được đóng góp từ cộng đồng ở mục TÀI LIỆU trên thư viện Howkteam.com. Nếu bạn có bất kỳ khó khăn hay thắc mắc gì về khóa học, đừng ngần ngại đặt câu hỏi trong phần BÌNH LUẬN bên dưới hoặc trong mục HỎI & ĐÁP trên thư viện Howkteam.com để nhận được sự hỗ trợ từ cộng đồng. Hiện nay, C++ đã là cái tên rất quen thuộc trong ngành lập trình. Mặc dù C++ là ngôn ngữ lập trình đã ra đời khá lâu, nhưng không phải ai cũng có cơ hội để tìm hiểu về nó. Vì vậy, Kteam đã xây dựng lên khóa học LẬP TRÌNH C++ CĂN BẢN để cung cấp một lượng kiến thức về ngôn ngữ C++ nói riêng, và các khái niệm khác trong lập trình nói chung. Nội dung khóa học sẽ được phân tách một cách chi tiết, nhằm giúp các bạn dễ hiểu và thực hành được ngay. Serial dành cho những bạn chưa có bất kỳ kiến thức gì về lập trình, hoặc những bạn mất căn bản muốn lấy lại kiến thức nền tảng lập trình, cụ thể là C++.
