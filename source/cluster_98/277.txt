keyword: Chồng hàm
url: https://nguyenvanhieu.vn/nap-chong-ham-va-nap-chong-toan-tu-cpp/
content:
Chào cả nhà, lại là mình đây. Trong bài tiếp theo chúng ta sẽ cùng tìm hiểu về Nạp chồng toán tử và Nạp chồng hàm là gì nhé. Ngôn ngữ C++ cho phép bạn xác định nhiều hơn một định nghĩa cho một tên hàm hoặc một toán tử trong cùng phạm vi (scope), được gọi tương ứng là Nạp chồng hàm (function overloading) và Nạp chồng toán tử (operator overloading). Một khai báo nạp chồng là một khai báo mà đã được khai báo với cùng tên như một khai báo được khai báo trước đó trong cùng phạm vi, ngoại trừ rằng: cả hai khai báo có các tham số khác nhau và định nghĩa khác nhau. Khi bạn gọi một hàm nạp chồng hoặc một toán tử nạp chồng, thì trình biên dịch quyết định định nghĩa thích hợp nhất để sử dụng bằng việc so sánh các kiểu tham số bạn đã sử dụng để gọi hàm hoặc toán tử với các kiểu tham số đã được xác định trong các định nghĩa. Tiến trình lựa chọn hàm nạp chồng hoặc toán tử nạp chồng thích hợp nhất này được gọi là phân giải nạp chồng ( overload resolution ). Nhưng nếu ta thay intmax(4,5) thành intmax(4.4,5.5) thì kết quả nhận được vẫn là int max = 5giống phía trên, do khi khao báo hàm ta truyền vào 2 tham số thuộc kiểu int. Vậy để có kết quả đúng là 5.5 thì ta phải viết thêm một hàm mới. Như vậy, ta sẽ có nhiều hàm với các tên gọi khác nhau. Việc sử dụng tên như vậy sẽ gây bất lợi cho người lập trình khi gọi hàm. Nạp chồng hàm ra đời để giải quyết vấn đề trên. Nạp chồng hàm (Function Overloading) là một kiến thức khá mới mẻ đối với các bạn mới bắt đầu làm quen với C++. Bởi vì kiến thức này không hề tồn tại trong C mà chỉ có ở C++. Kỹ thuật này cho phép sử dụng cùng một tên gọi cho các hàm “giống nhau” (có cùng mục đích). Nhưng khác nhau về kiểu dữ liệu tham số hoặc số lượng tham số. Nạp chồng hàm cho phép ta khai báo và định nghĩa các hàm trên cùng với một tên gọi. Nạp chồng toán tử (Operator Overloading) được dùng để định nghĩa toán tử cho có sẵn trong c++ phục vụ cho dữ liệu riêng do bạn tạo ra. Giả sử có lớp PhanSo và có các phương thức tính toán như Cong, Tru, Nhan, Chia. Nếu gặp một biểu thức phức tạp, số lượng phép tính nhiều thì việc sử dụng các phương thức trên khá khó khăn và có thể gây rối cho người lập trình. Vì thế ta sẽ nạp chồng lại các toán tử để có thể tạo một cái nhìn trực quan vào code, giảm thiểu các lỗi sai không đáng có. Một toán tử có thể được định nghĩa cho nhiều kiểu dữ liệu khác nhau. Toán tử đơn là toán tử một ngôi (unary operator), có thể được dùng làm toán tử trước (prefix operator) và toán tử sau (postfix operator). Ví dụ phép tăng (++) hay phép giảm (–-). Ví dụ: như A+B, A*B, hay toán tử chỉ mục cũng là toán tử đôi. Việc nạp chồng toán tử nhập xuất cho phép người dùng dùng cin, cout nhập xuất nhanh một đối tượng mà không cần gọi lại cin,cout cho từng thuộc tính của dữ liệu dựa trên việc được định nghĩa trước. Đối với nạp chồng toán tử nhập >> và toán tử xuất << ta sẽ dùng cách nạp chồng toán tử 2 ngôi. Đối với toán tử nhập >> kiểu trả về của nó sẽ là istream. Trong phần code trên, mình truyền tham số đầu tiền là tham chiếu is . Sau đó phần code trong thân hàm, tất cả cin mình sẽ thay bằng is và kết thúc hàm bằng return is. Tham số thứ 2 được truyền vào cũng dưới dạng tham chiếu obj thuộc lớp phanso. Cách thức nạp chồng toán tử xuất << Cũng tương tự như nạp chồng toán tử nhập >>. Điều khác biệt ở đây là os có kiểu trả về là ostream và tham số thứ 2 truyền vào có thể là tham trị chứ không nhất thiết phải là tham chiếu. Bài viết của mình tới đây là hết rồi. Nếu có bất kì thắc mắc hay đóng góp nào, mọi người đừng ngần ngại comment ngay phía dưới nhé. Rất mong nhận được sự ủng hộ của các bạn. Xin chào và hẹn gặp lại. Lập Trình Không Khó là một cộng đồng chia sẻ và đào tạo lập trình phi lợi nhuận hàng đầu tại Việt Nam.
