keyword: Con trỏ rỗng
url: http://minhhn.com/lap-trinh-c/con-tro-trong-lap-trinh-c-cplusplus/
content:
– Chắc hẳn khi học về lập trình C/C++ các bạn đều nghe sự đồn thổi về độ khó của con trỏ rồi nhỉ. Vậy con trỏ là gì? Có ăn được không? Chúng ta sẽ cùng làm sáng tỏ trong series về nó nhé. – Con trỏ là một biến bình thường nhưng có thể trỏ đi lung tung trong bộ nhớ. Và giá trị của nó là địa chỉ của một biến khác (địa chỉ trực tiếp của một ô nhớ trong bộ nhớ). – Về bản chất con trỏ cũng như một biến bình thường: nó cũng có tên biến, giá trị của biến, địa chỉ của biến. Nhưng có điểm khác là:. Những biến bình thường thì nó chỉ nằm cố định trong 1 ô nhớ, còn biến con trỏ thì nó còn có thể trỏ đến các ô nhớ khác nhau. <Kiểu dữ liệu> khi khai báo cho con trỏ không phải là kiểu dữ liệu của nó, mà là kiểu dữ liệu của vùng nhớ mà nó đang trỏ đến. – Vì biến con trỏ có thể trỏ đi lung tung trong bộ nhớ nên việc sử dụng bộ nhớ sẽ linh hoạt hơn. – Áp dụng cho mảng động. Có nghĩa là khi chúng ta sử dụng mảng tĩnh với số lượng phần tử của mảng là cố định, chẳng hạn như mảng có 100 phần tử, thì dù chúng ta chỉ sử dụng 5 – 10 phần tử để thao tác tính toán thôi, thì bộ nhớ cũng sẽ cấp phát 100 ô nhớ, do đó mà sẽ gây ra lãng phí bộ nhớ không đáng có. Còn khi chúng ta sử dụng mảng động dùng con trỏ thì chúng ta sử dụng 5 thì bộ nhớ cấp phát 5 ô nhớ, sử dụng 10 thì bộ nhớ cấp phát 10 ô nhớ. Có thể bạn quan tâm: Cách cấp phát và giải phóng bộ nhớ trong lập trình C. – Sau này khi đến lập trình hướng đối tượng, thì phải có con trỏ mới thực hiện đa hình được. (Chúng ta sẽ đề cập đến vấn đề này ở bài Tính đa hình trong C++). ・Khi khai báo 1 hàm kiểu con trỏ thì dấu * để sát tên kiểu dữ liệu. – Dùng toán tử * để lấy giá trị của một biến con trỏ (và toán tử * cũng thể hiện cho một biến là con trỏ, nên các bạn khi sử dụng cần phân biệt rõ ràng là khi nào *p là con trỏ p, khi nào *p là đang muốn lấy giá trị của con trỏ p). – Con trỏ vô kiểu void* : Có thể nhận được mọi kiểu dữ liệu nhưng khi sử dụng cần phải ép về kiểu dữ liệu muốn sử dụng (Để hiểu hơn thì bạn xem minh họa ở mục Cách sử dụng con trỏ cơ bản). Con trỏ khai báo kiểu int thì chỉ trỏ đến ô nhớ kiểu int, con trỏ khai báo kiểu float thì chỉ trỏ được đến ô nhớ có kiểu là float,… Nếu con trỏ khai báo kiểu int mà chúng ta cho trỏ đến ô nhớ kiểu float hoặc ngược lại thì sẽ lỗi. Nhưng đối với con trỏ vô kiểu void* thì nó có thể trỏ được đến ô nhớ bất kỳ không quan tâm đến kiểu dữ liệu của ô nhớ đó. – Con trỏ null : Một con trỏ được gán giá trị NULL thì được gọi là con trỏ null (giá trị NULL viết IN HOA nhé). Đây là cách tốt nhất và được khuyến cáo là nên sử dụng (good practice) trong trường hợp bạn không biết chính xác địa chỉ để biến con trỏ trỏ đến. Và thường được sử dụng để khởi tạo giá trị cho biến con trỏ ngay sau khi khai báo. Con trỏ null là một hằng số có giá trị là 0. ・Trong hầu hết các hệ điều hành, các chương trình không được phép truy cập bộ nhớ tại địa chỉ 0 vì bộ nhớ đó được dành riêng bởi hệ điều hành. Tuy nhiên, ở đây địa chỉ bộ nhớ 0 có ý nghĩa đặc biệt. Nó báo hiệu rằng con trỏ không nhằm trỏ đến một vị trí bộ nhớ, mà theo quy ước, nếu một con trỏ chứa giá trị NULL (zero), thì có nghĩa là không có gì cả. – Để làm quen với con trỏ vô kiểu void*, bạn thử viết 1 hàm xóa phần mở rộng của 1 tên file(chẳng hạn, input: tailieu.docx => output: tailieu hoặc input: bangtinh.xlsx => output: bangtinh), người dùng có thể truyền vào tên file có thể là kiểu char* hoặc wchart* đều được. Những gì tôi viết trên blog này là những trải nghiệm thực tế tôi đã đúc rút ra được trong cuộc sống, quá trình học tập và làm việc. Các bài viết được biên tập một cách chi tiết, linh hoạt để giúp bạn đọc có thể tiếp cận một cách dễ dàng nhất. Hi vọng nó sẽ có ích hoặc mang lại một góc nhìn khác cho bạn. ・ Cách 2: Truyền tham số cho hàm NhapSoNguyen bằng con trỏ và có kiểu trả về là void. (Xem bài: Con trỏ trong lập trình C)
