keyword: Quy hoạch động
url: https://neralnetwork.wordpress.com/2020/10/25/dynamic-programming-quy-hoach-dong-trong-lap-trinh-vi-du/
content:
Dynamic Programming-Quy hoạch động là gì?Dynamic programming là một phương pháp được sử dụng trong lĩnh vực tối ưu toán học và lập trình máy tính. Được phát triển bởi nhà toán học ứng dụng nổi tiếng người Mỹ Richard E. Bellman trong những năm 1950. Dynamic Programming có ý tưởng tương tự phương pháp “chia để trị” chia bài toán ban đầu phức tạp thành các bài toán con đơn giản hơn. Bước này sẽ lặp lại cho đến khi bài toán con có thể giải được một cách đơn giản. Tổng hợp kết quả của bài toán con để suy ra kết quả của bài toán ở mức trên. Từ đây ta có thể thấy phương pháp quy hoạch động có thể cái đặt được bằng đệ quy (recursive). Các đặc điểm của một bài toán có thể giải bằng Dynamic ProgrammingĐầu tiên tôi xin nhắc lại nguyên lý tối ưu Bellman như sau:Một chính sách tối ưu bào gồm một dãy các quyết định có đặc tính là dù trạng thái và quyết định ban đầu có như thế nào đi nữa thì các quyết định còn lại luôn là một dãy các quyết định tối ưu (tạo ra chính sách tối ưu) với kết quả đạt được liên quan đến kết quả của quyết định ban đầu.Bài toán P có thể giải được bằng giải thuật quy hoạch động nếu thỏa mãn các đặc điểm sau:. Bài toán P có các bài toán con gối lên nhau hay nói cách khác không gian bài toán con hẹp và không tạo thành cây. Nếu hai bài toán con được sinh ra cùng mức (được sinh ra từ một bài toán) thì lời giải hai bài toán con này đòi hỏi lời giải của cùng một số bài toán con ở mức dưới. Hệ thức truy hồiNhư đã phát biểu ở trên trong lập trình động khi giải bài toán con ở mức trên ta cần tổng hợp kết quả của bài toán con ở mức dưới. Vậy chúng ta cần phải xây dựng một hệ thức để biểu thị mối quan hệ này. Hơn nữa trong trường hợp bài toán đòi hỏi kết quả là tối ưu ta cần tìm hệ thức để đạt được điều này. Hệ thức như vậy được gọi là hệ thức truy hồi. Để rõ hơn điều này chúng ta xem ví dụ về một bài toán nỗi tiếng trên thế giới sau:Bài toán Tháp Hà nội: có 3 cọc A, B và C. Cọc A chứa N chiếc đĩa theo nguyên tắc đĩa to ở dưới và đĩa nhỏ ở trên, cọc B và C rỗng. Cần chuyển N chiếc đĩa này từ A sang C có thể sử dụng B làm trung gian, mỗi lần chuyển chỉ được một đĩa và đĩa trên các cọc đều phải tuân theo nguyên tắc đĩa nhỏ ở trên, đĩa to ở dưới. Theo hướng tiếp cận Top-Down chúng ta sẽ bắt đầu bằng bài toán lớn nhất hay là bài toán ở mức trên cùng sau đó dùng phương pháp đệ quy để gọi lời giải cho các bài toán con ở mức thấp hơn tiếp theo. Qúa trình tiếp tục cho đến khi gặp bài toán nhỏ nhất. Đệ quy sẽ tự động tổ hợp kết quả của các bài toán con để được kết quả bài toán ban đầu. Cách này đòi hỏi tốn nhiều tài nguyên để ghi nhớ tất cả kết quả của các bài toán con.
