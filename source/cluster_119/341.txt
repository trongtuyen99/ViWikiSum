keyword: Phát triển phần mềm linh hoạt
url: https://www.saga.vn/phuong-phap-phat-trien-phan-mem-linh-hoat-nam-lay-cac-quy-trinh-khong-dong-bo~47987
content:
Phát triển phần mềm linh hoạt (agile software development – gọi tắt là Agile) là một triết lí cùng với nhóm các phương pháp và phương pháp luận phát triển phần mềm dựa trên các nguyên tắc phát triển phân đoạn lặp (iterative) và tăng trưởng (incremental), theo đó nhu cầu và giải pháp tiến hóa thông qua sự hợp tác giữa các nhóm tự quản và liên chức năng. Agile thường sử dụng cách lập kế hoạch thích ứng (adaptive planning), việc phát triển và chuyển giao theo hướng tiến hóa; sử dụng các khung thời gian ngắn và linh hoạt để dễ dàng phản hồi lại với các thay đổi trong quá trình phát triển. Ngày nay, triết lí Agile đã vượt xa khỏi khu vực truyền thống của mình là phát triển phần mềm để đóng góp sự thay đổi trong cách thức làm việc, quản lí, sản xuất ở các ngành khác như sản xuất (manufacturing), dịch vụ, sales, marketing, giáo dục v.v. Giống như nhiều người cùng tuổi với tôi trong ngành này (phát triển phần mềm) nếu điều đó không rõ ràng, tôi vẫn nhớ cách mà mọi thứ hoạt động trước khi có internet và phương pháp phát triển phần mềm linh hoạt .Lập trình trong những ngày đó là sử dụng các công cụ đắt tiền đi kèm với chồng sách đặt trên bàn của bạn. Thậm chí ở chỗ làm vẫn chưa có internet.Tôi đã học lập trình bằng cách sử dụng hướng dẫn cơ bản đi kèm với phó đề đốc của tôi 64. Agile( tập hợp các nguyên lý dành cho phát triển phần mềm) không phải là một vật.Mọi thứ đã thay đổi kể từ đó và chủ yếu là tốt hơn.Lập trình Extreme của Kent Beck là một cuốn sách và lý tưởng mà tôi đã rất chờ đợi nó ra mắt.Trong khoảng thời gian đó, tôi đã làm Ph. D( tiến sĩ khoa học). trong lĩnh vực kỹ thuật phần mềm. Tôi thậm chí đã đề cập nó trong luận án của tôi vào năm 2003 . Phong trào Agile (Kent Beck tất nhiên là một trong những người ký Tuyên ngôn Agile), đã cách mạng hóa sự phát triển đã được cách mạng hóa theo nhiều cách. Sai lầm khi thực hiện phương pháp AgileNgày nay, mọi người đang tuyên bố / giả vờ nhanh nhẹn. Từ này đã trở nên hơi vô nghĩa. Mọi ngân hàng, công ty bảo hiểm và cửa hàng phần mềm nhỏ đang làm theo phương pháp. Capital A Agile tất nhiên vì họ đang làm những việc "theo sách".Bất cứ ai biết bất cứ điều gì về Agile đều biết đây chính xác là điều sai trái. Tôi đã ở cùng phòng với một số người ký tuyên ngôn tại các hội nghị, bài giảng, hội thảo, v.v. và tôi đã nghe họ giải thích rõ ràng về điều này. Phương pháp Agile là một bộ công cụ và cách làm việc mà bạn sử dụng và thích ứng với nhu cầu của bạn. Sử dụng sách làm điểm bắt đầu, chứ không phải là trạng thái kết thúc. Nếu bạn không biết gì, bạn cũng có thể bắt đầu bằng cách làm điều này. Tôi đã hơi mệt mỏi với việc các phe phái chỉ trích “ bạn đang làm sai “ dập tắt mọi thứ như phương pháp Scrum, mà tôi cho rằng đã trở nên hơi có hại trong ngành công nghiệp của chúng tôi.Mọi người hoặc ghét scrum hoặc yêu nó và chủ yếu là vì những lý do sai lầm (một trong hai cách).Nói rộng ra, mọi người không thích sự thiếu logic của ứng dụng bị lan truyền, các cuộc tranh cãi thường xuyên trong các cuộc họp vô nghĩa , và sự cạn kiệt cảm xúc và lãng phí năng lượng cho những tranh luận về cách làm "đúng", bất kể điều đó có nghĩa là gì. Cá nhân tôi, đây là điều mà tôi đã chứng kiến trong hầu hết các dự án mà tôi đã tham gia trong 15 năm qua. Bằng chứng cho thấy tôi không đơn độc. Dù tốt hơn hay tệ hơn, phương pháp Scrum đã thay thế mô hình “thác nước” thành thứ dễ nắm bắt để các tổ chức tự sắp xếp lại thành phương pháp Agile mà không thực sự phải thay đổi nhiều. Điều đó không có nghĩa là Scrum hoặc Agile là xấu nhưng đặc biệt Scrum dường như đã trở thành công cụ được lựa chọn để triển khai nhanh. Scrum thậm chí còn có thuật ngữ riêng cho việc này: scrumbutt. Có rất nhiều điều không “linh hoạt” đang diễn ra trong ngành công nghiệp của chúng tôi. Hầu hết các công ty phát triển phần mềm đều nhàm chán, ngớ ngẩn và không hiệu quả như 20 năm trước. Các dự án công nghệ thông tin của chính phủ vẫn tiến hành sai một cách ngoạn mục. Các ngân hàng vẫn mất hàng tấn tiền trong các dự án sai lầm. Các công ty như Lidl vẫn cho phép bản thân bị gạt bởi các công ty như SAP (đến mức 0,5 tỷ ). Xin lưu ý, tôi đổ lỗi cho cả hai công ty điều này. Ngày nay ,mọi người đến nhà thờ Agile cầu nguyện và có rất nhiều Agilists tự phong / huấn luyện viên Agile / vv để giúp bạn tìm ra cách làm đúng. Rất nhiều công ty sử dụng một số người đi trước để đảm bảo họ làm những việc "theo sách", điều này tất nhiên “đánh bại” mục đích. Dù quan điểm của bạn về vấn đề này là gì, một xu hướng trong ngành của chúng tôi là mọi thứ đang thay đổi một lần nữa và mọi người đang nhìn xa hơn về những cách thức tổ chức phát triển phần mềm khác nhau và tương đối mới. Nếu chỉ để phân biệt với tất cả những người làm theo phương pháp Agile một cách sai trái. Agile đã xuất hiện gần 20 năm rồi. Bạn sẽ không thể cải thiện mọi thứ bằng cách không thay đổi mọi thứ và làm mọi thứ rung chuyển một chút. Một số người đã bắt đầu coi đây là bài viết nói về phương pháp Agile. Dù đó là gì, scrum chắc chắn không phải là một phần của nó. Khi bản tuyên ngôn về Agile được ký, hầu hết mọi người trên thực tế không làm theo phương pháp Agile hoặc bất cứ thứ gì liên quan đến nó. Agile là một điều mới mẻ và có phần gây tranh cãi. Mọi người đang làm đủ thứ và nói chung là khó hiểu và xung đột giữa các quy trình , kỹ thuật mô hình hóa , yêu cầu phương pháp kỹ thuật và công cụ.Sau đó ,các trường đại học chủ yếu dạy mô hình thác nước. Vào cuối những năm 1990 và đầu những năm 2000, mọi người đã cố gắng chuẩn hóa các ngôn ngữ mô hình hóa. Kết quả, UML( ngôn ngữ mô hình hóa thống nhất), đã được phổ biến rộng rãi trong một thời gian và các công ty như Rational (sau này được IBM mua lại) đã cố gắng biến nó thành trung tâm của quá trình phát triển. Kết quả,Quy trình phát triển phần mềm hợp nhất RUP đã được coi là hiện đại sau đó và đưa ra thời gian ngắn chống lại Agile. Rational và RUP đã kết thúc trong tay IBM; được cho là một trong những công ty linh hoạt nhất tồn tại vào thời điểm đó (và ngày nay). Bộ đồ màu xanh / áo sơ mi trắng vẫn còn tồn tại ở IBM. Các tiêu chuẩn, chứng nhận, đào tạo và kinh doanh tư vấn liên quan đang bùng nổ. UML và RUP đã duy trì các giáo điều của mô hình thác nước, trước tiên là thực hiện các thiết kế chi tiết (tất nhiên là sử dụng UML) sau khi thực hiện các yêu cầu kỹ thuật (cũng sử dụng UML, như thế nào cho thuận tiện) và trước khi thực hiện công việc và trước khi thử nghiệm sẽ bắt đầu. Tóm lại, điều đó cũng được cho là được thực hiện bằng cách sử dụng UML với một thứ gọi là phát triển theo mô hình. Rất may, MDA(đại lý tuyên truyền thông điệp) và phạm vi liên quan của phần mềm miễn phí không còn xuất hiện nhiều trong các cuộc thảo luận nghiêm túc về phát triển phần mềm ngày nay. Nhưng RUP cũng là một bước đệm hướng tới phương pháp Agile. Tiến trình hợp nhất đã cố gắng để được lặp đi lặp lại là tốt. Điều này thực sự có nghĩa là bạn phải thực hiện mô hình thác nước nhiều lần trong một dự án; mỗi quý một lần hoặc hơn. Tiền đề của Rational là công cụ cần thiết này, rất nhiều công cụ. Các công cụ rất phức tạp đòi hỏi rất nhiều tư vấn. Đây là lý do tại sao IBM đã mua chúng và họ đã kiếm được rất nhiều tiền khi các tổ chức thực hiện RUP, đào tạo kiến trúc sư phần mềm và bán giấy phép với giá cao cho phần mềm. Quay trở lại những ngày đó, bất kỳ kiến trúc sư phần mềm tự trọng nào cũng có một số hộp và sách có logo Rational( lý trí ) nổi bật trong tầm nhìn. Họ đang sử dụng các sơ đồ nhìn ấn tượng và thông thường sẽ có rất nhiều tài liệu kiến trúc và thiết kế với nhiều sơ đồ hơn. Phương phá Agile đã dán tiếp làm thất vọng vì con người thực hiện, chủ yếu theo nghĩa là nó đã nổ bong bóng đó. Xin lỗi về sự chơi chữ xấu. Nó chỉ tan đi trong không gian khoảng 5 năm. Từ năm 2000 đến 2005, UML dần biến mất khỏi cuộc sống của chúng ta. Tôi đã không sử dụng các công cụ UML từ lâu và không thể nói rằng tôi nhớ chúng. Phát triển lặp đi lặp lại dĩ nhiên là cũ như mô hình thác nước. Bài báo gốc của Royce về mô hình thác nước Quản lý sự phát triển của các hệ thống phần mềm lớn từ năm 1970 thực sự vẫn là một bài đọc khá tốt và sớm được bổ sung bằng các bài báo về phát triển xoắn ốc và lặp lại. Vòng phản hồi là một điều tốt; mọi kỹ sư đều biết điều này. Trong thực tế, Royce đã đưa ra các bước lặp trong bài báo đó! Trích dẫn từ bài báo: "Cố gắng thực hiện công việc hai lần - kết quả đầu tiên sớm sẽ cung cấp một mô phỏng cho sản phẩm cuối cùng". Royce đã cố gắng trở thành phương pháp Agile vào năm 1970.Tất nhiên công việc của anh ta bị câm lặng: trước tiên hãy thực hiện các yêu cầu; đặt những thứ đó vào đá và biến chúng thành thiết kế và thực hiện và có thể thực hiện kiểm tra / sửa lỗi một chút trước khi chúng ta ném nó lên tường và bỏ đi. Thật thú vị, mô hình thác nước không xuất hiện trong bài báo của Royce! Bài báo gốc về mô hình thác nước hoàn toàn không đề cập đến mô hình thác nước. Đừng đổ lỗi cho Royce hay cho mô hình thác nước. Từ ngày đầu tiên mô hình thác nước chưa bao giờ là một thứ gì đó. Điều mà tuyên ngôn agile và sự chuyển động đạt được là bong bóng thác nước đã vỡ và sự phát triển lặp lại trở thành chuẩn mực. Có rất nhiều tài liệu thiết kế trong UML cản trở bạn khi lặp lại và làm cho khó thực hiện điều đó. Nếu lặp đi lặp lại mục tiêu của bạn, bạn không thể mất thời gian làm điều đó. Mọi người nhận ra rằng giá trị gia tăng của tài liệu này thường không đầy đủ và hết hạn là điều đáng nghi ngờ. Kết quả là UML đã trở thành một thứ vô ích và từ đó mà ngày nay đó không phải là một chủ đề xuất hiện trong kế hoạch phần mềm. Tương tự với các tài liệu yêu cầu. Đây là một chút ma thuật để bắt đầu. Với những người nhanh nhẹn đã nhận ra rằng việc xác định các vùng nhỏ của những gì bạn muốn thay đổi so với những gì bạn có ngay bây giờ dễ dàng hơn nhiều thay vì chỉ định toàn bộ điều đó từ trước. Mà bạn chắc chắn sẽ sai bất luận thế nào. Loại bỏ sự quan liêu của dự án như thế cho phép các chu kỳ ngắn hơn và lặp lại nhanh hơn và phát triển tập trung xung quanh các nguyên mẫu làm việc ban đầu. Lập trình cực đoan là về việc đưa nó đến mức cao nhất (vào thời điểm đó) để thực hiện những lần chạy nước rút chỉ trong vài tuần. Điều này là chưa từng thấy trong một ngành công nghiệp nơi các dự án có thể mất nhiều tháng hoặc nhiều năm mà không tạo ra mã làm việc. Các công cụ như trình theo dõi vấn đề ủy quyền này. Bugzilla là người nổi tiếng đầu tiên có nhiều sự thu hút. Điều này xảy ra khoảng thời gian Agile trở thành một thứ được nhận diện bởi người dùng. Trình theo dõi vấn đề đã biến các yêu cầu thành một cách làm việc mới. Thay vì viết thông số kỹ thuật, thay vào đó bạn chỉ định các yêu cầu thay đổi dưới dạng các vấn đề được theo dõi. Ban đầu, nó được sử dụng cho các lỗi nhưng rất nhanh nó đã được mở rộng để theo dõi tất cả các loại thay đổi. Tương tự, wiki đã thay thế tài liệu thiết kế và sản phẩm. Phương pháp Agile sinh ra việc áp dụng và phát triển rất nhiều công cụ mới; nhiều trong số đó có nguồn gốc từ các cộng đồng nguồn mở. Ngày nay, bất kỳ dự án nào cũng có trình theo dõi vấn đề, một số loại hệ thống kiểm soát phiên bản phi tập trung (thường là Git), công cụ CI, wiki, công cụ truyền thông như irc hoặc slack, v.v. Những công cụ này rất cần thiết và chúng tiếp tục thay đổi cách mọi người làm việc. Một số công cụ này được chạy trong đám mây bởi các công ty như Atlassian, Gitlab và Github. Việc Microsoft mua lại sau này cho thấy tầm quan trọng của những công cụ này. Thế giới nguồn mở luôn được phân phối và không bao giờ có thể dựa vào các cuộc họp. Do đó, họ đã áp dụng các công cụ và quy trình hỗ trợ cách làm việc của họ. Các dự án ban đầu đã sử dụng những thứ như danh sách gửi thư và các nhóm tin tức; và các hệ thống kiểm soát phiên bản như CVS, RCS và những thứ sau này như Subversion và Git. Tương tự như vậy, Irc trước Slack vài thập kỷ và tiếp tục là cách giao tiếp ưa thích trong một số dự án. Việc thực hành các yêu cầu kéo trên Github / Gitlab hiện đang phổ biến trong các dự án doanh nghiệp xuất hiện từ thực tiễn trao đổi các bản vá thông qua danh sách gửi thư và các nhóm tin tức. Cuối cùng, Git đã được tạo để làm cho quá trình này dễ dàng hơn và Github đã tạo giao diện người dùng cho nó. Nhiều trong số các công cụ này không phổ biến (hoặc thậm chí xung quanh) khi bản tuyên ngôn Agile được ký.
