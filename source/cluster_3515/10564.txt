keyword: Hàm tạo (lập trình hướng đối tượng)
url: https://codelearn.io/sharing/lap-trinh-huong-doi-tuong-phan-2
content:
Trong phần trước chúng ta đã hiểu được các khái niệm cơ bản trong lập trình hướng đối tượng. Ở phần này mình sẽ đi sâu hơn về lớp và đối tượng cùng những kiến thức xung quanh chúng nhé. Như mình đã nói trong phần trước, một lớp (class) là một nhóm các đối tượng mà có các thuộc tính chung. Lớp (class) là một template hoặc bản thiết kế từ đó đối tượng được tạo. Trong C++, để định nghĩa một lớp ta bắt đầu bằng từ khóa class, tiếp theo đó là tên của lớp và phần thân lớp được bao bởi cặp dấu . Kết thúc lớp bằng dấu ;. Về phạm vi truy cập sẽ có 3 loại chính là private, protected và public. Mình xin sẽ nói chi tiết hơn ở mục sau. Khi một lớp (Class) được định nghĩa, chỉ có đặc tả cho đối tượng được xác định; các đối tượng sẽ không được khởi tạo, nghĩa là không có bộ nhớ hoặc lưu trữ được phân bổ cho các đối tượng thuộc lớp đó. Để sử dụng dữ liệu và các hàm truy cập được xác định trong lớp, bạn cần khai báo các đối tượng (object). Nghĩa là các dữ liệu thành viên của mayAsus sẽ không bị thay đối khi dữ liệu thành viên của mayAcer thay đổi và các dữ liệu thành viên của mayAcer cũng sẽ không thể truy cập, tác động đến dữ liệu thành viên của mayAsus. Để truy cập vào thành viên dữ liệu của đối tượng ta sử dụng toán tử truy cập thành viên trực tiếp là dấu . Phạm vi truy cập là cách mà người lập trình quy định về quyền được truy xuất đến các thành phần của lớp. Trong C++ có 3 loại phạm vi chính là: private, protected, public. *Lưu ý : Trong lớp (class), nếu ta không khai báo phạm vi truy cập thì chương trình sẽ tự động mặc định đó là private. Với ví dụ về lớp Mayvitinh bên trên, hàm Xuat() là một hàm được xác định bên trong lớp. Còn để xác định một hàm thành viên bên ngoài lớp ta phải sử dụng toán tử scope :: kèm theo đó là tên lớp và tên phương thức. Mình xin kết thúc phần này tại đây, ở phần sau chúng ta sẽ tìm hiểu về hàm khởi tạo và hàm hủy trong OOP. Các bạn nhớ theo dõi nhé. Nếu các bạn có thắc mắc hay góp ý về bài, hãy comment bên dưới để mình cùng nhau tiến bộ hơn nhé. Khi làm việc với C, vấn đề sẽ xảy ra khi bạn dùng các collection này để lưu trữ kiểu dữ liệu nguyên thủy(int, double,.) vì khi đó sẽ xảy ra quá trình boxing/unboxing. This là một con trỏ (trong C++) hay một từ khóa (trong Java), được sử dụng rộng rãi trong lập trình hướng đối tượng. Bạn đã thực sự hiểu "this" chưa?. Lập trình hướng đối tượng hiểu đơn giản là một phương pháp để giải quyết bài toán lập trình mà khi áp dụng thì code sẽ trở nên dễ phát triển và dễ bảo trì hơn.
